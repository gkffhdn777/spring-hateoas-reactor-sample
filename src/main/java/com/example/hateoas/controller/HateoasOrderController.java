package com.example.hateoas.controller;import static org.springframework.hateoas.server.reactive.WebFluxLinkBuilder.linkTo;import static org.springframework.hateoas.server.reactive.WebFluxLinkBuilder.methodOn;import com.example.hateoas.application.OrderService;import com.example.hateoas.command.OrderCommand;import com.example.hateoas.infra.ProductRepository;import com.example.hateoas.query.OrderList;import com.example.hateoas.query.OrderView;import java.util.HashMap;import java.util.Map;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Description;import org.springframework.hateoas.CollectionModel;import org.springframework.hateoas.EntityModel;import org.springframework.hateoas.Link;import org.springframework.hateoas.MediaTypes;import org.springframework.hateoas.RepresentationModel;import org.springframework.hateoas.mediatype.Affordances;import org.springframework.hateoas.mediatype.hal.HalModelBuilder;import org.springframework.http.HttpMethod;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PatchMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import reactor.core.publisher.Mono;@RestController@RequestMapping(value = "/v1/hateoas")@RequiredArgsConstructorpublic class HateoasOrderController {  private final OrderService orderService;  private final ProductRepository productRepository;  private final HateoasOrderController orderController = methodOn(HateoasOrderController.class);  private final ProductController productController = methodOn(ProductController.class);  @Description("hal")  @GetMapping(value = "/{id}", produces = MediaTypes.HAL_JSON_VALUE + ";charset=UTF-8")  public Mono<RepresentationModel<?>> viewOrder(@PathVariable final Long id) {    return Mono.zip(this.orderService.findById(id), this.orderService.findAll().collectList(),        this.productRepository.findAll().collectList())        .flatMap(orderZip -> {          Mono<Link> link1 = linkTo(orderController.viewOrder(id)).withSelfRel().toMono();          Mono<Link> link2 = linkTo(orderController.orders()).withRel("orders").toMono();          Mono<Link> link3 = linkTo(productController.findAll()).withRel("productList").toMono();          return Mono.zip(link1, link2, link3)              .flatMap(zip2 -> {                RepresentationModel<?> model =                    HalModelBuilder.halModelOf(orderZip.getT1())                        .preview(orderZip.getT2())                        .forLink(zip2.getT2())                        .embed(orderZip.getT3())                        .link(zip2.getT3())                        .link(zip2.getT1())                        .build();                return Mono.just(model);              });        });  }  @Description("halForm")  @PostMapping(value = "", produces = MediaTypes.HAL_FORMS_JSON_VALUE + ";charset=UTF-8")  public Mono<EntityModel<Boolean>> createOrder(@RequestBody final OrderCommand.Create create) {    return this.orderService.create(create)        .flatMap(bool -> {          return Mono.zip(              linkTo(orderController.createOrder(create)).withSelfRel().toMono(),              linkTo(orderController.changeAddress(null)).withRel("changeAddress").toMono())              .map(link -> {                Link link1 = Affordances.of(link.getT1())                    .afford(HttpMethod.PATCH)                    .withInput(OrderCommand.ChangeAddress.class)                    .withName("changeAddress")                    .toLink();                return EntityModel.of(bool, link1);              });        });  }  @Description("hateoas")  @GetMapping(value = "/orders/{id}", produces = MediaTypes.HAL_JSON_VALUE + ";charset=UTF-8")  public Mono<EntityModel<OrderView>> orderOne(@PathVariable final Long id) {    return this.orderService.findById(id)        .flatMap(orderView -> {          Mono<Link> link1 = linkTo(orderController.orderOne(id)).withSelfRel().toMono();          Mono<Link> link2 = linkTo(orderController.removeOrder(id)).withRel("removeOrder").toMono();          return Mono.zip(link1, link2)              .flatMap(zip2 -> Mono.just(EntityModel.of(orderView, zip2.getT1(), zip2.getT2())));        });  }  @Description("halForm")  @GetMapping(value = "", produces = MediaTypes.HAL_FORMS_JSON_VALUE + ";charset=UTF-8")  public Mono<CollectionModel<EntityModel<OrderList>>> orders() {    return this.orderService.findAll()        .flatMap(order -> linkTo(orderController.viewOrder(order.getId())).withSelfRel().toMono()            .map(link -> EntityModel.of(order, link)))        .collectList()        .flatMap(entityModels -> {          return linkTo(orderController.orders()).withSelfRel()              .andAffordance(orderController.createOrder(null))              .andAffordance(orderController.changeAddress(null)).toMono()              .map(link -> CollectionModel.of(entityModels, link));        });  }  @PatchMapping("")  public Mono<EntityModel<Map<String, Boolean>>> changeAddress(@RequestBody final OrderCommand.ChangeAddress changeAddress) {    return this.orderService.changeAddress(changeAddress)        .flatMap(aBoolean -> {          Mono<Link> link1 = linkTo(orderController.changeAddress(null)).withSelfRel().toMono();          Mono<Link> link2 = linkTo(orderController.orderOne(changeAddress.getId())).withRel("orderOne").toMono();          return Mono.zip(Mono.just(aBoolean), link1, link2);        })        .map(zip3 -> {          Map<String, Boolean> map = new HashMap<>();          map.put("result", zip3.getT1());          return EntityModel.of(map, zip3.getT2(), zip3.getT3());        });  }  @DeleteMapping("/remove/{id}")  public Mono<EntityModel<Map<String, Boolean>>> removeOrder(@PathVariable final Long id) {    return this.orderService.delete(id)        .flatMap(aBoolean -> {          Mono<Link> link1 = linkTo(orderController.removeOrder(id)).withSelfRel().toMono();          Mono<Link> link2 = linkTo(orderController.orders()).withRel("orders").toMono();          return Mono.zip(Mono.just(aBoolean), link1, link2);        })        .map(zip3 -> {          Map<String, Boolean> map = new HashMap<>();          map.put("result", zip3.getT1());          return EntityModel.of(map, zip3.getT2(), zip3.getT3());        });  }}